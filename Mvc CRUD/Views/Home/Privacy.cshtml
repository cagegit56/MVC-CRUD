<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Table with Pagination</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        .table-container {
            overflow-x: auto;
        }
        .pagination {
            margin: 20px 0;
        }
        .highlight {
            background-color: #fff3cd;
        }
        .search-box {
            max-width: 300px;
            margin-bottom: 20px;
        }
        h1, h2 {
            color: #343a40;
        }
        .action-links a {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="text-center">
            <h1 class="display-4">Welcome</h1>
            <h2 class="mt-4">All Data</h2>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control search-box" />

            <form method="get" class="d-flex align-items-center">
                <label class="me-2">Rows per page: </label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
            </form>
        </div>

        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>UserName</th>
                        <th>ToUser</th>
                        <th>Message</th>
                        <th>Sent On</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                    <!-- Data will be populated here -->
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <div id="paginationInfo" class="text-muted">Showing 0 of 0 records</div>

            <nav aria-label="Page navigation">
                <ul class="pagination mb-0" id="pagination">
                    <!-- Pagination will be generated here -->
                </ul>
            </nav>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let pageSize = 5;
        let searchTerm = '';
        let allData = [];
        let filteredData = [];

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('pageSize').value = pageSize;
            document.getElementById('searchBy').addEventListener('input', handleSearch);
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);

            // Load data from the server initially
            loadData(currentPage, pageSize, searchTerm);
        });

        async function loadData(page, size, filter) {
            try {
                const response = await fetch(`/Home/Index?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`, {
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                });

                const result = await response.json();
                allData = result.data || [];
                filteredData = [...allData];

                renderTable();
                setupPagination(result.totalPages);
                updatePaginationInfo(result.totalRecords);
            } catch (err) {
                console.error("Error loading data:", err);
            }
        }

        function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            filteredData.forEach(item => {
                const row = document.createElement('tr');

                if (searchTerm && (
                    item.message.toLowerCase().includes(searchTerm) ||
                    item.userName.toLowerCase().includes(searchTerm) ||
                    item.toUser.toLowerCase().includes(searchTerm)
                )) {
                    row.classList.add('highlight');
                }

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="action-links">
                        <a href="/Home/AddData/${item.id}">Edit</a>
                        <a href="/Home/DeleteData/${item.id}">Delete</a>
                    </td>
                `;

                tableBody.appendChild(row);
            });
        }

        function setupPagination(totalPages) {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            if (totalPages <= 1) return;

            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                                    <span aria-hidden="true">&laquo;</span></a>`;
            paginationElement.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationElement.appendChild(pageLi);
            }

            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                                   <span aria-hidden="true">&raquo;</span></a>`;
            paginationElement.appendChild(nextLi);

            paginationElement.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const page = parseInt(this.getAttribute('data-page'));
                    if (!isNaN(page) && page !== currentPage) {
                        currentPage = page;
                        loadData(currentPage, pageSize, searchTerm);
                    }
                });
            });
        }

        function updatePaginationInfo(totalRecords) {
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(startIndex + filteredData.length - 1, totalRecords);
            const info = totalRecords === 0 ? "Showing 0 of 0 records" : `Showing ${startIndex} to ${endIndex} of ${totalRecords} records`;

            document.getElementById('paginationInfo').textContent = info;
        }

        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();

            debounceTimer = setTimeout(() => {
                currentPage = 1;
                loadData(currentPage, pageSize, searchTerm);
            }, 300);
        }

        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            loadData(currentPage, pageSize, searchTerm);
        }
    </script>

</body>
</html>

@* @{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p> *@
