<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Table with Pagination</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        .table-container {
            overflow-x: auto;
        }
        .pagination {
            margin: 20px 0;
        }
        .highlight {
            background-color: #fff3cd;
        }
        .search-box {
            max-width: 300px;
            margin-bottom: 20px;
        }
        h1, h2 {
            color: #343a40;
        }
        .action-links a {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="text-center">
            <h1 class="display-4">Welcome</h1>
            <h2 class="mt-4">All Data</h2>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control search-box" />

            <form method="get" class="d-flex align-items-center">
                <label class="me-2">Rows per page: </label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                </select>
            </form>
        </div>

        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>UserName</th>
                        <th>ToUser</th>
                        <th>Message</th>
                        <th>Sent On</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                    <!-- Data will be populated here -->
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <div id="paginationInfo" class="text-muted">Showing 0 of 0 records</div>

            <nav aria-label="Page navigation">
                <ul class="pagination mb-0" id="pagination">
                    <!-- Pagination will be generated here -->
                </ul>
            </nav>
        </div>
    </div>

    <script>
        // Sample data - in a real application, this would come from your server
        const allData = [
            { id: 1, userName: "john_doe", toUser: "jane_smith", message: "Hello there!", sentOn: "2023-05-01 10:30:00" },
            { id: 2, userName: "jane_smith", toUser: "john_doe", message: "Hi John! How are you?", sentOn: "2023-05-01 10:32:15" },
            { id: 3, userName: "john_doe", toUser: "jane_smith", message: "I'm doing great! Thanks for asking.", sentOn: "2023-05-01 10:35:22" },
            { id: 4, userName: "alice_wonder", toUser: "bob_builder", message: "Meeting tomorrow at 9 AM", sentOn: "2023-05-02 14:20:45" },
            { id: 5, userName: "bob_builder", toUser: "alice_wonder", message: "Got it. I'll be there.", sentOn: "2023-05-02 14:25:30" },
            { id: 6, userName: "charlie_brown", toUser: "snoopy", message: "Good grief!", sentOn: "2023-05-03 08:15:10" },
            { id: 7, userName: "snoopy", toUser: "charlie_brown", message: "Woof woof!", sentOn: "2023-05-03 08:16:05" },
            { id: 8, userName: "test_user", toUser: "admin", message: "Testing the system", sentOn: "2023-05-04 11:45:33" },
            { id: 9, userName: "admin", toUser: "test_user", message: "System is working fine", sentOn: "2023-05-04 11:50:12" },
            { id: 10, userName: "demo", toUser: "user", message: "This is a demo message", sentOn: "2023-05-05 09:30:00" },
            { id: 11, userName: "user", toUser: "demo", message: "Demo received successfully", sentOn: "2023-05-05 09:32:45" },
            { id: 12, userName: "developer", toUser: "manager", message: "Code review completed", sentOn: "2023-05-06 16:40:20" }
        ];

        // State variables
        let currentPage = 1;
        let pageSize = 10;
        let filteredData = [...allData];
        let searchTerm = '';

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('pageSize').value = pageSize;
            renderTable();
            setupPagination();
            updatePaginationInfo();

            // Add event listeners
            document.getElementById('searchBy').addEventListener('input', handleSearch);
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);
        });

        // Render the table with current data
        function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, filteredData.length);

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            for (let i = startIndex; i < endIndex; i++) {
                const item = filteredData[i];
                const row = document.createElement('tr');

                // Highlight if it matches search term
                if (searchTerm && (
                    item.message.toLowerCase().includes(searchTerm) ||
                    item.userName.toLowerCase().includes(searchTerm) ||
                    item.toUser.toLowerCase().includes(searchTerm)
                )) {
                    row.classList.add('highlight');
                }

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="action-links">
                        <a href="/Home/AddData/${item.id}">Edit</a>
                        <a href="/Home/DeleteData/${item.id}">Delete</a>
                    </td>
                `;

                tableBody.appendChild(row);
            }
        }

        // Setup pagination controls
        function setupPagination() {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            const totalPages = Math.ceil(filteredData.length / pageSize);

            if (totalPages <= 1) return;

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                                <span aria-hidden="true">&laquo;</span></a>`;
            paginationElement.appendChild(prevLi);

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationElement.appendChild(pageLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                               <span aria-hidden="true">&raquo;</span></a>`;
            paginationElement.appendChild(nextLi);

            // Add event listeners to pagination links
            paginationElement.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (!this.parentElement.classList.contains('disabled')) {
                        currentPage = parseInt(this.getAttribute('data-page'));
                        renderTable();
                        setupPagination();
                        updatePaginationInfo();
                    }
                });
            });
        }

        // Update pagination information text
        function updatePaginationInfo() {
            const totalPages = Math.ceil(filteredData.length / pageSize);
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(startIndex + pageSize - 1, filteredData.length);

            document.getElementById('paginationInfo').textContent =
                `Showing ${filteredData.length ? startIndex : 0} to ${endIndex} of ${filteredData.length} records`;
        }

        // Handle search input with debounce
        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();

            debounceTimer = setTimeout(() => {
                filteredData = allData.filter(item =>
                    item.message.toLowerCase().includes(searchTerm) ||
                    item.userName.toLowerCase().includes(searchTerm) ||
                    item.toUser.toLowerCase().includes(searchTerm)
                );

                currentPage = 1;
                renderTable();
                setupPagination();
                updatePaginationInfo();
            }, 300);
        }

        // Handle page size change
        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            renderTable();
            setupPagination();
            updatePaginationInfo();
        }
    </script>
</body>
</html>

@* @{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p> *@
