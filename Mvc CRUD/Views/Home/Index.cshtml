@using Mvc_CRUD.Pagination
@model PaginateResponse<List<Mvc_CRUD.Models.Chat>>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light py-4">
    @{
        ViewData["Title"] = "Home Page";
    }

    <div class="container bg-white p-4 rounded shadow-sm">
        <div class="text-center mb-4">
            <h1 class="display-4">Welcome</h1>
        </div>

        <div class="d-flex justify-content-start mb-3">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control" style="max-width: 300px;margin-bottom: 20px;" />
        </div>

        <div class="table-responsive">
            <table class="table table-bordered table-striped table-hover align-middle">
                <thead class="table-primary">
                    <tr>
                        <th class="text-secondary">ID</th>
                        <th class="text-secondary">UserName</th>
                        <th class="text-secondary">ToUser</th>
                        <th class="text-secondary">Message</th>
                        <th class="text-secondary">Sent On</th>
                        <th class="text-secondary">Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                    @foreach (var res in Model.Data)
                    {
                        <tr id="row-@res.Id">
                            <td>@res.Id</td>
                            <td>@res.UserName</td>
                            <td>@res.ToUser</td>
                            <td>@res.Message</td>
                            <td>@res.SentOn</td>
                            <td class="d-flex gap-1">
                            <a href="/Home/AddData/@res.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                            <button class="btn btn-sm btn-outline-danger" onclick="deleteRow(@res.Id)">Delete</button>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        <div id="loadingSpinner" class="d-flex justify-content-center my-4" style="display:none;">
            <div class="spinner-border text-primary" role="status">
            </div>
        </div>

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3 gap-2">
            <form method="get" class="d-flex align-items-center gap-2 flex-wrap">
                <label for="pageSize" class="mb-0">rows per page:</label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </form>

            <div class="d-flex flex-wrap align-items-center gap-3">
                <div id="paginationInfo" class="text-muted"></div>
                <ul class="pagination mb-0 flex-wrap" id="pagination"></ul>
            </div>
        </div>
        <a href="@Url.Action("Logout", "Home")">Logout</a>
    </div>

    <script>
        let currentPage = 1;
        let pageSize = 5;
        let searchTerm = '';
        let filteredData = [];

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('pageSize').value = pageSize;
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);
            document.getElementById('searchBy').addEventListener('input', handleSearch);

            loadData(currentPage, pageSize, searchTerm);
        });

        async function loadData(page, size, filter) {

            const loadSpinner = document.getElementById("loadingSpinner");
            loadSpinner.classList.remove("d-none");

            try {
                const response = await fetch(`/Home/Index?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`, {
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                });

                const result = response.headers.get("content-type")?.includes("application/json")
                 ? await response.json() : { data: [], totalPages: 0, totalRecords: 0 };
                filteredData = result.data || [];

                renderTable();
                setupPagination(result.totalPages);
                updatePaginationInfo(result.totalRecords);
             if (!response.headers.get("content-type")?.includes("application/json")) {
                console.warn("API did not return JSON. Response:", await response.text());
              }
            } catch (err) {
                console.error("Error loading data:", err);
            }
                loadSpinner.classList.add("d-none");
            }

            function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            filteredData.forEach(item => {
                const row = document.createElement('tr');
                row.id = "row-" + item.id;

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="d-flex gap-1">
                    <a href="/Home/AddData/${item.id}" class="btn btn-sm btn-outline-primary">Edit</a>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteRow(${item.id})">Delete</button>
                    </td>
                `;

                tableBody.appendChild(row);
            });
        }

        function setupPagination(totalPages) {
        const paginationElement = document.getElementById('pagination');
        paginationElement.innerHTML = '';

        if (totalPages <= 1) return;

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `
            <a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                <span aria-hidden="true">&laquo;</span>
            </a>`;
        paginationElement.appendChild(prevLi);

        function createPageItem(page) {
            const li = document.createElement('li');
            li.className = `page-item ${page === currentPage ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" data-page="${page}">${page}</a>`;
            paginationElement.appendChild(li);
        }

        function createEllipsis() {
            const li = document.createElement('li');
            li.className = "page-item disabled";
            li.innerHTML = `<span class="page-link">...</span>`;
            paginationElement.appendChild(li);
        }

        if (totalPages <= 7) {
            for (let i = 1; i <= totalPages; i++) createPageItem(i);
        } else {
            if (currentPage <= 4) {
                for (let i = 1; i <= 5; i++) createPageItem(i);
                createEllipsis();
                createPageItem(totalPages);
            } else if (currentPage >= totalPages - 3) {
                createPageItem(1);
                createEllipsis();
                for (let i = totalPages - 4; i <= totalPages; i++) createPageItem(i);
            } else {
                createPageItem(1);
                createEllipsis();
                for (let i = currentPage - 1; i <= currentPage + 1; i++) createPageItem(i);
                createEllipsis();
                createPageItem(totalPages);
            }
        }

        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `
            <a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                <span aria-hidden="true">&raquo;</span>
            </a>`;
        paginationElement.appendChild(nextLi);

        paginationElement.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const page = parseInt(this.getAttribute('data-page'));
                if (!isNaN(page) && page >= 1 && page <= totalPages && page !== currentPage) {
                    currentPage = page;
                    loadData(currentPage, pageSize, searchTerm);
                }
            });
        });
    }

        function updatePaginationInfo(totalRecords) {
            const shown = filteredData.length;
            const info = totalRecords === 0
                ? "Showing 0 of 0 records"
                : `Showing ${shown} of ${totalRecords} records`;

            document.getElementById('paginationInfo').textContent = info;
        }


        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();
            debounceTimer = setTimeout(() => {
                currentPage = 1;
                loadData(currentPage, pageSize, searchTerm);
            }, 600);
        }

        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            loadData(currentPage, pageSize, searchTerm);
        }

        async function deleteRow(id) {
            if (!confirm("Are you sure you want to delete this record?")) return;

            try {
                const response = await fetch(`/Home/DeleteData?id=${encodeURIComponent(id)}`);
                const result = await response.json();

                if (result.success) {
                    const row = document.getElementById("row-" + id);
                    if (row) row.remove();
                    loadData(currentPage, pageSize, searchTerm);
                } else {
                    alert(result.message);
                }
            } catch (err) {
                console.error("Error deleting:", err);
                alert("Error while deleting record");
            }
        }


    </script>
</body>
</html>






@* @model IEnumerable<Chat>

@{
    ViewData["Title"] = "Home Page";
    var jsonData = System.Text.Json.JsonSerializer.Serialize(Model, new System.Text.Json.JsonSerializerOptions
    {
        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
    });
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light py-4">

    <div class="container bg-white p-4 rounded shadow-sm">
        <div class="text-center mb-4">
            <h1 class="display-4">Welcome</h1>
        </div>

        <div class="d-flex justify-content-start mb-3">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control" style="max-width: 300px;margin-bottom: 20px;" />
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>UserName</th>
                        <th>ToUser</th>
                        <th>Message</th>
                        <th>Sent On</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                   
                </tbody>
            </table>
            </div>

            <div id="loadingSpinner" class="d-flex justify-content-center my-4" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                </div>
            </div>

            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3 gap-2">
            <form method="get" class="d-flex align-items-center gap-2 flex-wrap">
                <label for="pageSize" class="mb-0">rows per page:</label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                </select>
            </form>

            <div class="d-flex flex-wrap align-items-center gap-3">
                <div id="paginationInfo" class="text-muted"></div>
                <ul class="pagination mb-0 flex-wrap" id="pagination"></ul>
            </div>
        </div>

    </div>

    <script>
        let currentPage = 1;
        let pageSize = 5;
        let searchTerm = '';
        let allData = [];
        let filteredData = [];

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('pageSize').value = pageSize;
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);
             document.getElementById('searchBy').addEventListener('input', handleSearch);

            loadData(currentPage, pageSize, searchTerm);
        });

        async function loadData(page, size, filter) {

            const tableBody = document.getElementById('tableData');
            const loadSpinner = document.getElementById("loadingSpinner");
            loadSpinner.classList.remove("d-none");

            try {
                const response = await fetch(`/Home/GetAll?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`, 
                {headers: { "X-Requested-With": "XMLHttpRequest" }});

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                const result = response.headers.get("content-type")?.includes("application/json")
                 ? await response.json() : { data: [], totalPages: 0, totalRecords: 0 };
                 console.log("📌 Response Content-Type:", result);
               // if (!result.data.includes("application/json")) {
               //      throw new Error("Invalid response format (expected JSON).");
               //  }
                allData = result.data || [];
                filteredData = [...allData];

                renderTable();
                setupPagination(result.totalPages);
                updatePaginationInfo(result.totalRecords);
             if (!response.headers.get("content-type")?.includes("application/json")) {
                console.warn("API did not return JSON. Response:", await response.text());
              }
            } catch (err) {
                console.error("Error loading data:", err);
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center text-danger fw-bold">
                                Failed to load data: ${err.message}
                            </td>
                        </tr> `;
                        return;
            }finally {
                 loadSpinner.classList.add("d-none");
            }
                
            }

            function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            const fragment = document.createDocumentFragment();

            filteredData.forEach(item => {
                const row = document.createElement('tr');
                row.id = "row-" + item.id;

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="d-flex gap-1">
                    <a href="/Home/AddData/${item.id}" class="btn btn-sm btn-outline-primary">Edit</a>
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteRow(${item.id})">Delete</button>
                    </td>
                `;

                fragment.appendChild(row);
            });
            tableBody.appendChild(fragment);
        }

        function setupPagination(totalPages) {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            if (totalPages <= 1) return;

            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}"><span aria-hidden="true">&laquo;</span></a>`;
            paginationElement.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationElement.appendChild(pageLi);
            }

            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}"><span aria-hidden="true">&raquo;</span></a>`;
            paginationElement.appendChild(nextLi);

            paginationElement.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const page = parseInt(this.getAttribute('data-page'));
                    if (!isNaN(page) && page !== currentPage) {
                        currentPage = page;
                        loadData(currentPage, pageSize, searchTerm);
                    }
                });
            });
        }

            function updatePaginationInfo(totalRecords) {
            const shown = filteredData.length;
            const info = totalRecords === 0
                ? "Showing 0 of 0 records"
                : `Showing ${shown} of ${totalRecords} records`;

            document.getElementById('paginationInfo').textContent = info;
        }


        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();
            debounceTimer = setTimeout(() => {
                currentPage = 1;
                loadData(currentPage, pageSize, searchTerm);
            }, 600);
        }

        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            loadData(currentPage, pageSize, searchTerm);
        }

        async function deleteRow(id) {
            if (!confirm("Are you sure you want to delete this record?")) return;

            try {
                const response = await fetch(`/Home/DeleteData?id=${encodeURIComponent(id)}`);
                const result = await response.json();

                if (result.success) {
                    const row = document.getElementById("row-" + id);
                    if (row) row.remove();
                    loadData(currentPage, pageSize, searchTerm);
                } else {
                    alert(result.message);
                }
            } catch (err) {
                console.error("Error deleting:", err);
                alert("Error while deleting record");
            }
        }


    </script>
</body>
</html> *@

