<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light py-4">
    @{
        ViewData["Title"] = "Home Page";
    }

    <div class="container bg-white p-4 rounded shadow-sm">
        <div class="text-center mb-4">
            <h1 class="display-4">Welcome</h1>
        </div>

        <div class="d-flex justify-content-start mb-3">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control w-100 w-md-50" />
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>UserName</th>
                        <th>ToUser</th>
                        <th>Message</th>
                        <th>Sent On</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                   
                </tbody>
            </table>
            </div>

            <div id="loadingSpinner" class="d-flex justify-content-center my-4" style="display:none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>

            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3 gap-2">
            <form method="get" class="d-flex align-items-center gap-2 flex-wrap">
                <label for="pageSize" class="mb-0">rows per page:</label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                </select>
            </form>

            <div class="d-flex flex-wrap align-items-center gap-3">
                <div id="paginationInfo" class="text-muted"></div>
                <ul class="pagination mb-0 flex-wrap" id="pagination"></ul>
            </div>
        </div>

    </div>

    <script>
        let currentPage = 1;
        let pageSize = 5;
        let searchTerm = '';
        let allData = [];
        let filteredData = [];

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('pageSize').value = pageSize;
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);
            document.getElementById('searchBy').addEventListener('input', handleSearch);

            loadData(currentPage, pageSize, searchTerm);
        });

        async function loadData(page, size, filter) {

            const loadSpinner = document.getElementById("loadingSpinner");
            loadSpinner.classList.remove("d-none");

            try {
                const response = await fetch(`/Home/GetAll?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`);

                const result = response.headers.get("content-type")?.includes("application/json")
                 ? await response.json() : { data: [], totalPages: 0, totalRecords: 0 };
                allData = result.data || [];
                filteredData = [...allData];

                renderTable();
                setupPagination(result.totalPages);
                updatePaginationInfo(result.totalRecords);
             if (!response.headers.get("content-type")?.includes("application/json")) {
                console.warn("API did not return JSON. Response:", await response.text());
              }
            } catch (err) {
                console.error("Error loading data:", err);
            }
                loadSpinner.classList.add("d-none");
            }

            function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            filteredData.forEach(item => {
                const row = document.createElement('tr');

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="d-flex gap-1">
                        <a href="/Home/AddData/${item.id}" class="btn btn-sm btn-outline-primary">Edit</a>
                        <a href="/Home/DeleteData/${item.id}" class="btn btn-sm btn-outline-danger">Delete</a>
                    </td>
                `;

                tableBody.appendChild(row);
            });
        }

        function setupPagination(totalPages) {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            if (totalPages <= 1) return;

            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}"><span aria-hidden="true">&laquo;</span></a>`;
            paginationElement.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationElement.appendChild(pageLi);
            }

            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}"><span aria-hidden="true">&raquo;</span></a>`;
            paginationElement.appendChild(nextLi);

            paginationElement.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const page = parseInt(this.getAttribute('data-page'));
                    if (!isNaN(page) && page !== currentPage) {
                        currentPage = page;
                        loadData(currentPage, pageSize, searchTerm);
                    }
                });
            });
        }

        function updatePaginationInfo(totalRecords) {
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(startIndex + filteredData.length - 1, totalRecords);
            const info = totalRecords === 0 ? "Showing 0 of 0 records" : `Showing ${startIndex} - ${endIndex} of ${totalRecords} records`;

            document.getElementById('paginationInfo').textContent = info;
        }

        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();
            debounceTimer = setTimeout(() => {
                currentPage = 1;
                loadData(currentPage, pageSize, searchTerm);
            }, 300);
        }

        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            loadData(currentPage, pageSize, searchTerm);
        }
    </script>
</body>
</html>



@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Table with Pagination</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }

        .table-container {
            overflow-x: auto;
        }

        .pagination {
            margin: 20px 0;
        }

        .highlight {
            background-color: #fff3cd;
        }

        .search-box {
            max-width: 300px;
            margin-bottom: 20px;
        }

        h1, h2 {
            color: #343a40;
        }

        .action-links a {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="text-center">
            <h1 class="display-4">Welcome</h1>
            <h2 class="mt-4">All Data</h2>
        </div>

        <div class="d-flex justify-content-between align-items-center mb-4">
            <input type="text" id="searchBy" placeholder="Search messages..." class="form-control search-box" />
        </div>

        <div class="table-container">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Id</th>
                        <th>UserName</th>
                        <th>ToUser</th>
                        <th>Message</th>
                        <th>Sent On</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tableData">
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <form method="get" class="d-flex align-items-center">
                <label class="me-2">rows per page: </label>
                <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto">
                    <option value="5" selected>5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                </select>
            </form>
            <div id="paginationInfo" class="text-muted">Showing 0 of 0 records</div>

            <nav aria-label="Page navigation">
                <ul class="pagination mb-0" id="pagination">
                </ul>
            </nav>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let pageSize = 5;
        let searchTerm = '';
        let allData = [];
        let filteredData = [];

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('pageSize').value = pageSize;
            document.getElementById('searchBy').addEventListener('input', handleSearch);
            document.getElementById('pageSize').addEventListener('change', handlePageSizeChange);

            loadData(currentPage, pageSize, searchTerm);
        });

        async function loadData(page, size, filter) {
            try {
                const response = await fetch(`/Home/Index?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`, {
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                });

                const result = await response.json();
                allData = result.data || [];
                filteredData = [...allData];

                renderTable();
                setupPagination(result.totalPages);
                updatePaginationInfo(result.totalRecords);
            } catch (err) {
                console.error("Error loading data:", err);
            }
        }

        function renderTable() {
            const tableBody = document.getElementById('tableData');
            tableBody.innerHTML = '';

            if (filteredData.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="6" class="text-center">No matching records found</td></tr>`;
                return;
            }

            filteredData.forEach(item => {
                const row = document.createElement('tr');

                if (searchTerm && (
                    item.message.toLowerCase().includes(searchTerm) ||
                    item.userName.toLowerCase().includes(searchTerm) ||
                    item.toUser.toLowerCase().includes(searchTerm)
                )) {
                    row.classList.add('highlight');
                }

                row.innerHTML = `
                    <td>${item.id}</td>
                    <td>${item.userName}</td>
                    <td>${item.toUser}</td>
                    <td>${item.message}</td>
                    <td>${item.sentOn}</td>
                    <td class="action-links">
                    <a href="/Home/AddData/${item.id}" class="btn btn-sm btn-outline-primary me-1">Edit</a>
                    <a href="/Home/DeleteData/${item.id}" class="btn btn-sm btn-outline-danger">Delete</a>
                    </td>
                `;

                tableBody.appendChild(row);
            });
        }

        function setupPagination(totalPages) {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';

            if (totalPages <= 1) return;

            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" aria-label="Previous" data-page="${currentPage - 1}">
                                    <span aria-hidden="true">&laquo;</span></a>`;
            paginationElement.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationElement.appendChild(pageLi);
            }

            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" aria-label="Next" data-page="${currentPage + 1}">
                                   <span aria-hidden="true">&raquo;</span></a>`;
            paginationElement.appendChild(nextLi);

            paginationElement.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const page = parseInt(this.getAttribute('data-page'));
                    if (!isNaN(page) && page !== currentPage) {
                        currentPage = page;
                        loadData(currentPage, pageSize, searchTerm);
                    }
                });
            });
        }

        function updatePaginationInfo(totalRecords) {
            const startIndex = (currentPage - 1) * pageSize + 1;
            const endIndex = Math.min(startIndex + filteredData.length - 1, totalRecords);
            const info = totalRecords === 0 ? "Showing 0 of 0 records" : `Showing ${startIndex} - ${endIndex} of ${totalRecords} records`;

            document.getElementById('paginationInfo').textContent = info;
        }

        let debounceTimer;
        function handleSearch() {
            clearTimeout(debounceTimer);
            searchTerm = this.value.toLowerCase().trim();

            debounceTimer = setTimeout(() => {
                currentPage = 1;
                loadData(currentPage, pageSize, searchTerm);
            }, 300);
        }

        function handlePageSizeChange() {
            pageSize = parseInt(this.value);
            currentPage = 1;
            loadData(currentPage, pageSize, searchTerm);
        }
    </script>

</body>
</html> *@




@* <!DOCTYPE html>
    <html>
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home Page1</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    </head>
    <body>

    @using Mvc_CRUD.Pagination;

    @{
        ViewData["Title"] = "Home Page";
     }

    @model PaginateResponse<List<Chat>>

    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <br />
        <br />
        <h2 class="mt-4">All Data</h2>
    </div>

    <input type="text" id="searchBy" placeholder="Search messages..." class="form-control mb-3" style="max-width: 300px; margin-bottom: 20px;" />
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>UserName</th>
                <th>ToUser</th>
                <th>Message</th>
                <th>Sent On</th>
                <th>Action</th>
            </tr>
        </thead>

        <tbody id="tableData">
            @{
                foreach (var data in Model.Data)
                {
                    <tr>
                        <td>@data.Id</td>
                        <td>@data.UserName</td>
                        <td>@data.ToUser</td>
                        <td>@data.Message</td>
                        <td>@data.SentOn</td>
                        <td>
                            <a asp-action="AddData" asp-route-id="@data.Id" class="btn btn-sm btn-outline-primary me-1">Edit</a>
                            <a asp-action="DeleteData" asp-route-id="@data.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                        </td>
                    </tr>
                }
            }

        </tbody>

    </table>

    @{
        var pageSize = Model.PageSize == 50 ? 5 : Model.PageSize;
        Model.PageSize = pageSize;
    }

    <div class="d-flex justify-content-between align-items-center mt-3">
    <div class="d-flex align-items-center">
        <label for="pageSize" class="me-2 mb-0">rows per page:</label>
        <select id="pageSize" class="form-select form-select-sm w-auto">
                <option value="5" selected>5</option>
                <option value="10">10</option>
                <option value="20">20</option>
        </select>
    </div>

    <div class="d-flex align-items-center">
        <span class="me-3" id="paginationInfo">
            @( (Model.PageNumber - 1) * Model.PageSize + 1 )
            –
            @( Math.Min(Model.PageNumber * Model.PageSize, Model.TotalRecords) )
            of @Model.TotalRecords
        </span>

        <button class="btn btn-sm btn-outline-primary me-1" id="prevPage"
                data-page="@(Model.PageNumber - 1)" @(Model.PageNumber == 1 ? "disabled" : "")>
            <i class="bi bi-chevron-left"></i>
        </button>

        <button class="btn btn-sm btn-outline-primary" id="nextPage"
                data-page="@(Model.PageNumber + 1)" @(Model.PageNumber == Model.TotalPages ? "disabled" : "")>
            <i class="bi bi-chevron-right"></i>
        </button>
    </div>
    </div>

    @section Scripts
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
            if (@Model.PageSize == 5) {
                loadPage(1, 5, "");
            }
            });

            let currentPage = @Model.PageNumber;
            let pageSize = @Model.PageSize;
            let searchKey = "";

            document.getElementById("pageSize").addEventListener("change", function () {
                pageSize = this.value;
                loadPage(1, pageSize, searchKey);
            });

            document.getElementById("prevPage").addEventListener("click", function () {
                if (!this.disabled) {
                    loadPage(currentPage - 1, pageSize, searchKey);
                }
            });

            document.getElementById("nextPage").addEventListener("click", function () {
                if (!this.disabled) {
                    loadPage(currentPage + 1, pageSize, searchKey);
                }
            });

            let debounceTimer;
            document.getElementById("searchBy").addEventListener("keyup", function () {
                clearTimeout(debounceTimer);
                searchKey = this.value;

                debounceTimer = setTimeout(() => {
                    loadPage(1, pageSize, searchKey);
                }, 900);
            });

            function loadPage(page, size, filter) {
                fetch(`/Home/Index?pageNumber=${page}&pageSize=${size}&filter=${encodeURIComponent(filter)}`, {
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                })
                .then(res => res.json())
                .then(info => {
                    let rows = info.data ?? info;
                    let tableInfo = document.getElementById("tableData");
                    tableInfo.innerHTML = "";

                    if (!rows || rows.length === 0) {
                        tableInfo.innerHTML =
                            `<tr><td colspan="6" class="text-center fw-bold">No Matching Data Found</td></tr>`;
                    } else {
                        rows.forEach(item => {
                            let row = `
                                <tr>
                                    <td>${item.id ?? item.Id}</td>
                                    <td>${item.userName ?? item.UserName}</td>
                                    <td>${item.toUser ?? item.ToUser}</td>
                                    <td>${item.message ?? item.Message}</td>
                                    <td>${item.sentOn ?? item.SentOn}</td>
                                    <td>
                                        <a href="/Home/AddData/${item.id ?? item.Id}" class="btn btn-sm btn-outline-primary me-1">Edit</a>
                                        <a href="/Home/DeleteData/${item.id ?? item.Id}" class="btn btn-sm btn-outline-danger">Delete</a>
                                    </td>
                                </tr>`;
                            tableInfo.innerHTML += row;
                             console.log(row);
                        });
                    }

                    currentPage = info.pageNumber ?? page;
                    document.getElementById("paginationInfo").innerText =
                        `${(currentPage - 1) * size + 1} – ${Math.min(currentPage * size, info.totalRecords ?? rows.length)} of ${info.totalRecords ?? rows.length}`;

                    document.getElementById("prevPage").disabled = (currentPage === 1);
                    document.getElementById("nextPage").disabled = (currentPage === (info.totalPages ?? 1));
                });
            }
        </script>

    }
    
    </body>
    </html>

 *@
